Lista de exercícios 1
#1. Faça um programa que receba a idade do usuário e diga se ele é maior ou 
menor de idade.[ Done ] 

idade = int(input("Digite sua idade: "))
if idade < 0:
    print("Idade nao valida")
elif idade < 18:
    print("Menor de idade.")
else:
    print("Maior de idade.")
 
2. Faça um programa que receba duas notas digitadas pelo usuário. Se a nota
 for maior ou igual a seis, escreva aprovado, senão escreva reprovado. 
3. Escreva um programa que resolva uma equação de segundo grau.  
4. Escreva um programa que ordene uma lista numérica com três elementos.  
5. Escreva um programa que receba dois números e um sinal, e faça a operação matemática definida pelo sinal.    

--------------------------------------------------------------------------------------------------------------------------
* Python 2 vs. Python 3:

A maior diferença é a performance do Python 3 que é superior. 
Diferença de sintaxe:
1)Comando Print no python 3 é obrigatório

2)Comando input no Python 2 há duas variações 
raw_input() #strings
input() #Valores numéricos

no Python 3 usa-se apenas input() tanto para strings quanto para numeros e deve-se
combinar com as funções float ou int:
meu_texto = input("meu texto") #recebendo textos

numero_inteiro = int(input("Digite um numero inteiro: ")) #recebendo numeros inteiros

numero_decimal = float(input("Digite um numero decimal: ")) #recebendo numeros decimais

--------------------------------------------------------------------------------------------------------------------------

* Tratamento de excessões:

O tratamento de excessões percebe um possível erro previamente mapeado e 
reage a essa situação com uma solução temporária ou permanente. Evitando 
a interrupção da execução do programa.
Exemplo:

a = 2
b = 2

try:
	print(a/b)

except:
	print("não eh permitida divisão por 0")
--------------------------------------------------------------------------------------------------------------------------

* Escolha de números aleatorios usando python

O python fornece um modulo chamado random, que permite a chamada de alguns métodos que geram numeros aleatorios

import random

#random.seed(1) #força ao resultado ser o mesmo sempre
numero = random.randint(0,10) #escolhe um numero entre 0 e 10 aleatoriamente
print(numero)

lista = [6,45,9]
numero = random.choice() #seleciona um numero de uma lista
print(numero)

--------------------------------------------------------------------------------------------------------------------------
* Dicionarios:

Valores especificos são vinculados a uma chave. Exemplo:
dicionario_sites = {"Strange": "multiverseofmadness.com"}

No exemplo uma chave "Strange" foi vinculada ao valor "multiverseofmadness.com". Pode ser impressa da seguinte forma:
print(dicionario_sites['Strange'])
# Sera impresso "multiverseofmadness.com"

Se o dicionario tiver varios elementos, você pode usar laços para imprimi-lo:
dicionario_sites = {"Strange": "multiverseofmadness.com", "Peter": "semvoltaparacasa.com", "Tony": "ironman.com"}

for chave in dicionario_sites:
	print(dicionario_sites[chave])

O metodo items() retorna uma tupla com as chaves e valores, que serão uma composição imutavel de chave e valor

for i in meu_dicionario.items():
	print(i)

O metodo values() retorna só os valores, você pode navegar pelos valores

for i in meu_dicionario.values():
	print(i)

O metodo keys() retorna só as chaves, você pode navegar pelas chaves

for i in meu_dicionario.keys():
	print(i)


-------------------------------------------------------------------------------
* Listas:

Listas representam conjuntos de dados. Podem ser:
- Numérica: [1,2,3,4,5]
- Strings: ["bola","sapato","chuva"]

Como declarar uma lista:
minha_lista = ["abacaxi","melancia","abacate"]
minha_lista2 = [1,2,3,4,5]
minha_lista3 = ["abacaxi",2,9.89,True]

Como imprimir uma lista:
print(minha_lista)
print(minha_lista2)
print(minha_lista3)

Como fazer uma navegação na lista (printar um elemento especifico):
print(minha_lista[2])

For em uma lista:
for item in minha_lista:
	print(item)

Como verificar tamanho de uma lista:
através da função len().Exemplo:
tamanho = len(minha_lista)

Como adicionar um elemento na lista:
usando o metodo append().Exemplo:
minha_lista.append("limao")

Como verificar se um elemento pertence a uma lista:
usando a palavra reservada in, pode ser combinada com a condicional if. Exemplo:
if 3 in minha_lista2:
	print("3 esta na lista")

Como remover elementos de uma lista:
usa-se o del. Exemplo:
#irá remover do elemento 2 ate o final da lista
del minha_lista[2:] 

#irá remover todos os elementos da lista
del minha_lista[:] 

Como ordenar listas:
utiliza o metodo sort. se for uma lista de string ela será ordenada alfabeticamente. Exemplo:
minha_lista.sort()

OBS: a função sorted também ordena listas mas algum objeto deve ser retornado. Exemplo:
minha_lista = sorted(minha_lista)

Como ordenar de forma decrescente:
usa-se o parametro reverse. Exemplo:
minha_lista.sort(reverse=True)

OBS: se o reverse for usado como um metodo, então ele irá inverter os elementos da lista.Exemplo:
minha_lista.reverse()


----------------------------------------------------------------------------------

* Manipulando Arquivos:

Abrindo Arquivos:
Função open. EX: variavel = open(nome,modo)

Modo / Função
r -> somente leitura
w -> escrita (caso o arquivo já exista, ele será apagado e um novo arquivo vazio será criado)
a -> leitura e escrita (adiciona o novo conteudo ao fim do arquivo)
r+ -> leitura e escrita
w+ -> escrita( o modo w+, assim como o w, também apaga o conteudo anterior do arquivo)
a+ -> leitura e escrita (abre o arquivo para atualização)

Lendo Arquivos:
Lê arquivo inteiro. EX: read()
Lê uma linha. EX: readline()
Lê arquivo e o armazena em uma lista. EX: readlines()

Como abrir um aruivo:
arquivo = open("arquivo.txt")

Leitura de linhas em um arquivo:
linhas = arquivo.readlines()

Este comando salva todas as linhas do arquivo em formato de lista dessa forma se for feito necessário imprimir 
pode-se usar um for para imprimir linha a linha ou pode se usar um print no entanto o print ira imprimir como
uma lista horizontal separando cada linha por virgula.

Impressão das linhas do arquivo:
Exemplo 1: 
print(linhas)

Exemplo 2:
for linha in linhas:
	print(linha)

Com a Função read() o arquivo será lido por inteiro. Exemplo:

texto_completo = arquivo.read()

Como criar um arquivo:
w = open("arquivo2.txt","w")
w = open("arquivo2.txt","a")

Como escrever em um arquivo:
w.write("Esse eh o meu arquivo\n")

Como fechar um arquivo:
w.close()





------------------------------------------------------------------------------------------------
* Funções: são blocos de código que serão executados apenas quando chamados.

def - é a palavra reservada para indicar uma função
EX:
Definição: def NOME(PARÂMETROS):
		Comandos
Chamada: NOME(ARGUMENTOS)


Exemplo de uma função simples:
def soma(a,b):
    return(a+b)

print("Digite o numero a:")
a = int(input())
print("Digite o numero b:")
b = int(input())

result = soma(a,b)
print("A soma de a + b é: ",result) 

------------------------------------------------------------------------------------------------
* Strings: é um tipo de dados em que se armazena coleções de caracteres (texto)

São declaradas entre aspas. Ex: var2 = "1"

Concatenação de Strings: é a soma de duas ou mais variaveis.
Ex:
a = Steve
b = Strange
concatenar = a + " " + b
print(concatenar)

A função length indica o tamanho de uma string
Ex: 
tamanho = len(concatenar)
print(tamanho)

Navegação pelo indice de uma string pode ser feita atraves de colchetes:
EX:
letra = seq[1]
print(letra)

Imprimir parte de uma string, Ex:
seq = "Steve Strange"
print seq[0:4]

String é um objeto então pode ser aplicados métodos. 
EX:
string = string.método()

Removendo espaços no começo e no fim da string
EX: 
concatenar = concatenar.strip()

Converte uma string em uma lista
EX:
concatenar = concatenar.split()

Buscar substrings. Se a substring não for achada será retornado o valor -1
EX:
busca = concatenar.find("teve")
print busca

Substitui partes de uma string.
EX:
concatenar = concatenar.replace("teve","tive")
print concatenar

------------------------------------------------------------------------------------------------
* Objetos: são instâncias de classes. Por exemplo, quando você cria uma variável 
com uma string, você está criando um objeto do tipo string.

Objetos possuem atributos ( caracteristicas ) e métodos ( ações que podem ser 
aplicadas )

Exemplo:
	objeto.atributo
	objeto.método()

------------------------------------------------------------------------------------------------
* for: é um tipo de laço de repetição que tem por objetivo repetir uma condição
ou um trecho de código enquanto a variavel de iteração ainda for valida.

Exemplo:
	for i in range(0,5):
		print i

------------------------------------------------------------------------------------------------
* while: é um tipo de laço de repetição que tem por objetivo repetir uma condição
ou um trecho de código enquanto a variavel de iteração ainda for valida.

Exemplo:

i = 0
while i < 5:
	print("i:",i)
	#i = i + 1 
	i += 1

------------------------------------------------------------------------------------------------
*Laços de Repetição: Estruturas de repetição, que possuem iteradores que são
variáveis incrementadas ou decrementadas de acordo com o tamanho do laço, 
durante esse loop de repetição uma ação é executada.

------------------------------------------------------------------------------------------------
*Comando condicional:
if - identifica uma condição feita, e o seu resultado irá determinar o fluxo 
que o código pode levar. Exemplo 1

else - a opção oposta da condição tomada, se o resultado não entrar no 
if poderá entrar no else Exemplo 2

elif - identifica duas condições feitas, uma condição oposta ao if anterior e 
uma outra nova condição que pode surgir. Exemplo 3

Exemplo1:
x = 1
y = 2

if x > y:
	print("x maior que y")
else:
	print("x menor que y")

Exemplo2:

a = 7
b = 6

if b > a:
	if b > 0:
		print("b é maior que a\nb é positivo")
	else:
		print("b não é maior que a nem positivo")
else:
	print "b menor que a"

Exemplo 3: 

x = 1
y = 2

if x == y:
	print("numeros iguais")
elif y > x:
	print("y maior que x") 
  
------------------------------------------------------------------------------------------------
* Operadores Lógicos :
and - uma comparação onde todos os itens devem ser verdade
or - uma comparação onde pelo menos um dos itens é verdade
not - uma comparação onde nenhum dos itens devem ser verdade

------------------------------------------------------------------------------------------------
* Exponenciação em python é simbolizado por: **
Ex: 2 ** 3 é dois elevado ao cubo

------------------------------------------------------------------------------------------------
* Como adicionar UTF8?
#-*- coding: utf-8 -*-

------------------------------------------------------------------------------------------------
* Comentarios:
São marcados por #para apenas uma linha ou """ varias linhas """

------------------------------------------------------------------------------------------------
* Rodar o script:
Pelo CMD - abre o cmd na janela do arquivo e digita a palavra python nomeDoArquivo.py

------------------------------------------------------------------------------------------------
* Como funciona ?
Desenvolve o script -> Chama o interpretador -> Python compila e exibe os resultados

------------------------------------------------------------------------------------------------
* A Linguagem Python é de alto nível e dinâmica, fortemente tipada